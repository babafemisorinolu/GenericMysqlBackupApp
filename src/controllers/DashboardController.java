package controllers;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.ResourceBundle;
import java.util.Scanner;
import javafx.collections.ObservableList;

import javafx.event.ActionEvent;
import javafx.scene.control.ComboBox;

import javafx.scene.control.Label;
import javafx.scene.paint.Color;
import javafx.stage.FileChooser;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import utils.BackUpSQL;
import utils.SQL;

public class DashboardController implements Initializable {

    @FXML
    private Button btnBackup;

    @FXML
    private ComboBox<String> cboDatabaseList;

    @FXML
    private Button btnSignout;

    @FXML
    private Button btnSettings;

    @FXML
    private Button btnLoadDatabase;

    @FXML
    private Label lblErrors;
    private String path = null, username = null, pwd = "";

    // Event Listener on Button[#btnBackup].onAction
    @FXML
    public void btnBackupActionPerformed(ActionEvent event) {
        // TODO Autogenerated
        lblErrors.setText("");
        lblErrors.setTextFill(Color.web("#ff6354"));
        loadConfigurationSettings();
        String database_name = cboDatabaseList.getSelectionModel().getSelectedItem();
        if (path == null || path.trim().isEmpty()) {
            //Display Error Message.
            lblErrors.setText("MYSQL DUMP PATH NOT CORRECTLY SET. FIX IT");
            return;
        } else if (username == null || username.trim().isEmpty()) {
            lblErrors.setText("MYSQL DATABASE USERNAME NOT CORRECTLY SET. FIX IT");
            return;
        }

        if (database_name == null || database_name.isEmpty()) {
            //database not selected
            lblErrors.setText("SELECT DATABASE FROM LIST");
            cboDatabaseList.requestFocus();
            return;
        }

        FileChooser fileChooser = new FileChooser();
        //Set extension filter for text files
        FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("BACKUP FILE (*.sql)", "*.sql");
        fileChooser.getExtensionFilters().add(extFilter);

        fileChooser.setTitle("Specify A File to Save");
        String date_format = new SimpleDateFormat("MM-dd-yyyy").format(new Date());
        long timestamp = System.currentTimeMillis();
        String filename = database_name + "_backup_" + date_format + "_" + timestamp + ".sql";

        fileChooser.setInitialFileName(filename);
        Node node = (Node) event.getSource();
        Stage stage = (Stage) node.getScene().getWindow();
        //Show save file dialog
        File file = fileChooser.showSaveDialog(stage);

        if (file != null) {
            System.out.println("Save as file: " + file.getAbsolutePath());
            String savepath = file.getAbsolutePath();
            boolean status = new BackUpSQL().backupDB(path, database_name, username, pwd, savepath);
            if (status) {
                lblErrors.setTextFill(Color.web("#00FF00"));
                lblErrors.setText("Backup Successfully Created");
            } else {
                lblErrors.setText("Backup Creation Failed");
            }
        }

    }

    // Event Listener on Button[#btnSettings].onAction
    @FXML
    public void btnSettingsActionPerformed(ActionEvent event) {
        // TODO Autogenerated
        try {
            FXMLLoader myLoader = new FXMLLoader(getClass().getResource("/fxml/Settings.fxml"));
            Parent loadScreen;
            loadScreen = (Parent) myLoader.load();

            Stage stage = new Stage();
            // Specifies the modality for new window.
            stage.initModality(Modality.WINDOW_MODAL);
            stage.initStyle(StageStyle.UTILITY);

            Node node = (Node) event.getSource();

            Stage primaryStage = (Stage) node.getScene().getWindow();

            // Specifies the owner Window (parent) for new window
            stage.initOwner(primaryStage);

            Scene scene = new Scene(loadScreen);
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    @FXML
    public void btnLoadDatabaseActionPerformed(ActionEvent event) {
        lblErrors.setText("");
        loadConfigurationSettings();
        SQL sql = new SQL();
        if (SQL.getConnection(username, pwd) == null) {
            //Error , invalid credentials 
            lblErrors.setText("Error Connecting to Database. Check your DB Credentials");
        } else {
            cboDatabaseList.setItems((ObservableList<String>) sql.getDatabaseList());
        }
    }

    @FXML
    public void btnSignoutActionPerformed(ActionEvent event) {
        // TODO Autogenerated
        try {

            //add you loading or delays - ;-)
            Node node = (Node) event.getSource();
            Stage stage = (Stage) node.getScene().getWindow();
            //stage.setMaximized(true);
            stage.close();
            Scene scene = new Scene(FXMLLoader.load(getClass().getResource("/fxml/Login.fxml")));
            stage.setScene(scene);
            stage.show();

        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }
    }

    private String getPathSettings() {
        String mysqldump_path = null;

        try {
            Scanner in = new Scanner(new File("mysqldump_path.txt"));
            mysqldump_path = in.nextLine();
        } catch (Exception e) {
             //Display Error Message.
            lblErrors.setText("MYSQL DUMP PATH NOT CORRECTLY SET. FIX IT");
        }

        return mysqldump_path;
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        // TODO Auto-generated method stub
        lblErrors.setText("");
        loadConfigurationSettings();
    }

    private void loadConfigurationSettings() {
        //check if the MySQLDump Path is set.
        String PATH = getPathSettings();
        if (PATH != null) {
            String[] info = PATH.split(";");
            if (info.length == 2) {
                path = info[0];
                username = info[1];
                pwd = "";
            } else if (info.length == 3) {
                path = info[0];
                username = info[1];
                pwd = info[2];
            }

        }

    }
}
